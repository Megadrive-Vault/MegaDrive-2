00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 16/09/2017 01:46:04

00000000                             1  ;  ______   ______   __  __    
00000000                             2  ; /\  __ \ /\  ___\ /\ \_\ \   
00000000                             3  ; \ \  __ \\ \___  \\ \  __ \  
00000000                             4  ;  \ \_\ \_\\/\_____\\ \_\ \_\ 
00000000                             5  ;   \/_/\/_/ \/_____/ \/_/\/_/ 
00000000                             6  ;      ash@octronic.co.uk      
00000000                             7  ;
00000000                             8  ;   Palette.asm 
00000000                             9  ;      - Fun with the VDP Palette
00000000                            10    
00000000                            11      include "../include/Header.asm"
00000000                            12  ; ------------------------------------------------------------------------------
00000000                            13  ;  ______   ______   __  __    
00000000                            14  ; /\  __ \ /\  ___\ /\ \_\ \   
00000000                            15  ; \ \  __ \\ \___  \\ \  __ \  
00000000                            16  ;  \ \_\ \_\\/\_____\\ \_\ \_\ 
00000000                            17  ;   \/_/\/_/ \/_____/ \/_/\/_/ 
00000000                            18  ;      ash@octronic.co.uk      
00000000                            19  ;
00000000                            20  ; Sega Megadrive ROM header and Initialisation.
00000000                            21  ;
00000000                            22  ;   Shoutouts to: BigEvilCorporation
00000000                            23  ;
00000000                            24  ; ------------------------------------------------------------------------------
00000000                            25  
00000000                            26  ; System Constants
00000000  =00FFE000                 27  INITIAL_SP      equ $00FFE000
00000000  =00000000                 28  ROM_START       equ $00000000
00000000  =00FF0000                 29  RAM_START       equ $00FF0000
00000000  =00FFFFFF                 30  RAM_END         equ $00FFFFFF
00000000  =00000000                 31  SRAM_START      equ $00000000
00000000  =00000000                 32  SRAM_END        equ $00000000
00000000  =00A1000C                 33  RESET_BUTTON    equ $00A1000C
00000000  =00A10008                 34  RESET_AUX       equ $00A10008
00000000  =00A10001                 35  HW_VERSION      equ $00A10001
00000000  =53454741                 36  SEGA_STR        equ 'SEGA'
00000000  =00A14000                 37  TMSS_SIG        equ $00A14000
00000000  =00A10009                 38  CTRL_PORT_1     equ $000A10009      
00000000  =00A1000B                 39  CTRL_PORT_2     equ $000A1000B      
00000000  =00A1000D                 40  CTRL_PORT_EXP   equ $000A1000D    
00000000                            41  
00000000                            42  ; Z80 Constants
00000000  =00A11100                 43  Z80_BUSREQ      equ $00A11100
00000000  =00A11200                 44  Z80_RESET       equ $00A11200
00000000  =00A00000                 45  Z80_RAM_BASE    equ $00A00000
00000000  =00000100                 46  Z80_BUS_ENABLE  equ $0100
00000000  =00000000                 47  Z80_BUS_DISABLE equ $0000
00000000                            48  
00000000                            49  ; PSG Constants
00000000  =00C00011                 50  PSG_RAM_BASE    equ $00C00011
00000000                            51  
00000000                            52  ; VDP Constants
00000000  =00C00004                 53  VDP_CRTL_PORT   equ $00C00004
00000000                            54  ; Exception Table --------------------------------------------------------------
00000000                            55  
00000000= 00FFE000                  56      dc.l   INITIAL_SP      ; Initial stack pointer value
00000004= 00000200                  57      dc.l   _EntryPoint     ; Start of program
00000008= 000002DC                  58      dc.l   Exception       ; Bus error
0000000C= 000002DC                  59      dc.l   Exception       ; Address error
00000010= 000002DC                  60      dc.l   Exception       ; Illegal instruction
00000014= 000002DC                  61      dc.l   Exception       ; Division by zero
00000018= 000002DC                  62      dc.l   Exception       ; CHK exception
0000001C= 000002DC                  63      dc.l   Exception       ; TRAPV exception
00000020= 000002DC                  64      dc.l   Exception       ; Privilege violation
00000024= 000002DC                  65      dc.l   Exception       ; TRACE exception
00000028= 000002DC                  66      dc.l   Exception       ; Line-A emulator
0000002C= 000002DC                  67      dc.l   Exception       ; Line-F emulator
00000030= 000002DC                  68      dc.l   Exception       ; Unused (reserved)
00000034= 000002DC                  69      dc.l   Exception       ; Unused (reserved)
00000038= 000002DC                  70      dc.l   Exception       ; Unused (reserved)
0000003C= 000002DC                  71      dc.l   Exception       ; Unused (reserved)
00000040= 000002DC                  72      dc.l   Exception       ; Unused (reserved)
00000044= 000002DC                  73      dc.l   Exception       ; Unused (reserved)
00000048= 000002DC                  74      dc.l   Exception       ; Unused (reserved)
0000004C= 000002DC                  75      dc.l   Exception       ; Unused (reserved)
00000050= 000002DC                  76      dc.l   Exception       ; Unused (reserved)
00000054= 000002DC                  77      dc.l   Exception       ; Unused (reserved)
00000058= 000002DC                  78      dc.l   Exception       ; Unused (reserved)
0000005C= 000002DC                  79      dc.l   Exception       ; Unused (reserved)
00000060= 000002DC                  80      dc.l   Exception       ; Spurious exception
00000064= 000002DC                  81      dc.l   Exception       ; IRQ level 1
00000068= 000002DC                  82      dc.l   Exception       ; IRQ level 2
0000006C= 000002DC                  83      dc.l   Exception       ; IRQ level 3
00000070= 000002DA                  84      dc.l   HBlankInterrupt ; IRQ level 4 (horizontal retrace interrupt)
00000074= 000002DC                  85      dc.l   Exception       ; IRQ level 5
00000078= 000002DA                  86      dc.l   VBlankInterrupt ; IRQ level 6 (vertical retrace interrupt)
0000007C= 000002DC                  87      dc.l   Exception       ; IRQ level 7
00000080= 000002DC                  88      dc.l   Exception       ; TRAP #00 exception
00000084= 000002DC                  89      dc.l   Exception       ; TRAP #01 exception
00000088= 000002DC                  90      dc.l   Exception       ; TRAP #02 exception
0000008C= 000002DC                  91      dc.l   Exception       ; TRAP #03 exception
00000090= 000002DC                  92      dc.l   Exception       ; TRAP #04 exception
00000094= 000002DC                  93      dc.l   Exception       ; TRAP #05 exception
00000098= 000002DC                  94      dc.l   Exception       ; TRAP #06 exception
0000009C= 000002DC                  95      dc.l   Exception       ; TRAP #07 exception
000000A0= 000002DC                  96      dc.l   Exception       ; TRAP #08 exception
000000A4= 000002DC                  97      dc.l   Exception       ; TRAP #09 exception
000000A8= 000002DC                  98      dc.l   Exception       ; TRAP #10 exception
000000AC= 000002DC                  99      dc.l   Exception       ; TRAP #11 exception
000000B0= 000002DC                 100      dc.l   Exception       ; TRAP #12 exception
000000B4= 000002DC                 101      dc.l   Exception       ; TRAP #13 exception
000000B8= 000002DC                 102      dc.l   Exception       ; TRAP #14 exception
000000BC= 000002DC                 103      dc.l   Exception       ; TRAP #15 exception
000000C0= 000002DC                 104      dc.l   Exception       ; Unused (reserved)
000000C4= 000002DC                 105      dc.l   Exception       ; Unused (reserved)
000000C8= 000002DC                 106      dc.l   Exception       ; Unused (reserved)
000000CC= 000002DC                 107      dc.l   Exception       ; Unused (reserved)
000000D0= 000002DC                 108      dc.l   Exception       ; Unused (reserved)
000000D4= 000002DC                 109      dc.l   Exception       ; Unused (reserved)
000000D8= 000002DC                 110      dc.l   Exception       ; Unused (reserved)
000000DC= 000002DC                 111      dc.l   Exception       ; Unused (reserved)
000000E0= 000002DC                 112      dc.l   Exception       ; Unused (reserved)
000000E4= 000002DC                 113      dc.l   Exception       ; Unused (reserved)
000000E8= 000002DC                 114      dc.l   Exception       ; Unused (reserved)
000000EC= 000002DC                 115      dc.l   Exception       ; Unused (reserved)
000000F0= 000002DC                 116      dc.l   Exception       ; Unused (reserved)
000000F4= 000002DC                 117      dc.l   Exception       ; Unused (reserved)
000000F8= 000002DC                 118      dc.l   Exception       ; Unused (reserved)
000000FC= 000002DC                 119      dc.l   Exception       ; Unused (reserved)
00000100                           120  
00000100                           121  ; Header Section ---------------------------------------------------------------
00000100                           122  
00000100= 53 45 47 41 20 47 ...    123      dc.b    'SEGA GENESIS    '                                 ; Console name
00000110= 28 43 29 53 45 47 ...    124      dc.b    '(C)SEGA 1992.SEP'                                 ; Copyrght / Release
00000120= 41 73 68 73 20 47 ...    125      dc.b    'Ashs Game                                       ' ; Domestic name
00000150= 41 73 68 73 20 47 ...    126      dc.b    'Ashs Game                                       ' ; International name
00000180= 47 4D 20 58 58 58 ...    127      dc.b    'GM XXXXXXXX-XX'                                   ; Version number
0000018E= 0000                     128      dc.w    $0000                                              ; Checksum
00000190= 4A 20 20 20 20 20 ...    129      dc.b    'J               '                                 ; I/O support
000001A0= 00000000                 130      dc.l    ROM_START                                          ; Start address of ROM
000001A4= 00000520                 131      dc.l    __end                                              ; End address of ROM
000001A8= 00FF0000                 132      dc.l    RAM_START                                          ; Start address of RAM
000001AC= 00FFFFFF                 133      dc.l    RAM_END                                            ; End address of RAM
000001B0= 00000000                 134      dc.l    $00000000                                          ; SRAM enabled
000001B4= 00000000                 135      dc.l    $00000000                                          ; Unused
000001B8= 00000000                 136      dc.l    SRAM_START                                         ; Start address of SRAM
000001BC= 00000000                 137      dc.l    SRAM_END                                           ; End address of SRAM
000001C0= 00000000                 138      dc.l    $00000000                                          ; Unused
000001C4= 00000000                 139      dc.l    $00000000                                          ; Unused
000001C8= 20 20 20 20 20 20 ...    140      dc.b    '                                        '         ; Notes (unused)
000001F0= 4A 55 45 20 20 20 ...    141      dc.b    'JUE             '                                 ; Country codes
00000200                           142  
00000200                           143  _EntryPoint: ; -----------------------------------------------------------------
00000200  4A79 00A10008            144      tst.w    RESET_AUX          ; Test mystery reset (expansion port reset?)
00000206  6600 00CC                145      bne      Main               ; Branch if Not Equal (to zero) - to Main
0000020A  4A79 00A1000C            146      tst.w    RESET_BUTTON       ; Test reset button
00000210  6600 00C2                147      bne      Main               ; Branch if Not Equal (to zero) - to Main
00000214                           148  
00000214                           149  _SystemInit:
00000214  7000                     150      move.l  #$00000000,d0       ; Place a 0 into d0, ready to copy to each longword of RAM
00000216  207C 00000000            151      move.l  #$00000000,a0       ; Starting from address $0, clearing backwards
0000021C  223C 00003FFF            152      move.l  #$00003FFF,d1       ; Clearing 64k's worth of longwords (minus 1, for the loop 
00000222                           153                                  ; to be correct)
00000222                           154  _SystemInitClear:
00000222  2100                     155      move.l  d0,-(a0)            ; Decrement the address by 1 longword, before moving the zero 
00000224                           156                                  ; into it
00000224  51C9 FFFC                157      dbra    d1,_SystemInitClear ; Decrement d0, repeat until depleted
00000228                           158  
00000228  1039 00A10001            159      move.b  HW_VERSION,d0       ; Move Megadrive hardware version to d0
0000022E  0200 000F                160      andi.b  #$0F,d0             ; The version is stored in last four bits, so mask it with 0F
00000232  6700 000C                161      beq     _SkipTMSS           ; If version is equal to 0, skip TMSS signature
00000236  23FC 53454741 00A14000   162      move.l  #SEGA_STR,TMSS_SIG  ; Move the string 'SEGA' to $A14000
00000240                           163  
00000240                           164  _SkipTMSS:
00000240                           165  _Z80Init:
00000240  33FC 0100 00A11100       166      move.w  #$0100,Z80_BUSREQ   ; Request access to the Z80 bus, by writing $0100 into the 
00000248                           167                                  ; BUSREQ port
00000248  33FC 0100 00A11200       168      move.w  #$0100,Z80_RESET    ; Hold the Z80 in a reset state, by writing $0100 into the 
00000250                           169                                  ; RESET port
00000250                           170       
00000250                           171  _Z80InitWait:
00000250  0839 0000 00A11100       172      btst    #$00,Z80_BUSREQ     ; Test bit 0 of A11100 to see if the 68k has access to the 
00000258                           173                                  ; Z80 bus yet
00000258  66F6                     174      bne     _Z80InitWait        ; If we don't yet have control, branch back up to Wait
0000025A                           175  
0000025A                           176  _Z80InitWrite:
0000025A  207C 000002DE            177      move.l #Z80Data,a0          ; Load address of data into a0
00000260  227C 00A00000            178      move.l #Z80_RAM_BASE,a1     ; Copy Z80 RAM address to a1
00000266  7029                     179      move.l #$29,d0              ; 42 bytes of init data (minus 1 for counter)
00000268                           180  
00000268                           181  _Z80InitCopy:
00000268  12D8                     182      move.b  (a0)+,(a1)+         ; Copy data, and increment the source/dest addresses
0000026A  51C8 FFFC                183      dbra    d0,_Z80InitCopy
0000026E  33FC 0000 00A11200       184      move.w  #Z80_BUS_DISABLE,Z80_RESET    ; Release reset state
00000276  33FC 0000 00A11100       185      move.w  #Z80_BUS_DISABLE,Z80_BUSREQ   ; Release control of bus
0000027E                           186  
0000027E                           187  _PSGInit:
0000027E  207C 00000308            188      move.l  #PSGData,a0         ; Load address of PSG data into a0
00000284  7003                     189      move.l  #$03,d0             ; 4 bytes of data
00000286                           190  
00000286                           191  _PSGInitCopy:
00000286  13D8 00C00011            192      move.b (a0)+,PSG_RAM_BASE   ; Copy data to PSG RAM
0000028C  51C8 FFF8                193      dbra d0,_PSGInitCopy
00000290                           194  
00000290                           195  _VDPInit:
00000290  207C 0000030C            196      move.l #VDPRegisters,a0     ; Load address of register table into a0
00000296  7018                     197      move.l #$18,d0              ; 24 registers to write
00000298  223C 00008000            198      move.l #$00008000,d1        ; 'Set register 0' command (and clear the rest of d1 ready)
0000029E                           199       
0000029E                           200  _VDPInitCopy:
0000029E  1218                     201      move.b (a0)+,d1             ; Move register value to lower byte of d1
000002A0  33C1 00C00004            202      move.w  d1,VDP_CRTL_PORT    ; Write command and value to VDP control port
000002A6  0641 0100                203      add.w   #$0100,d1           ; Increment register #
000002AA  51C8 FFF2                204      dbra    d0,_VDPInitCopy
000002AE                           205  
000002AE                           206  _ControllerInit:                ; Set IN I/O direction, interrupts off, on all ports
000002AE  13FC 0000 00A10009       207      move.b #$00,CTRL_PORT_1     ; Controller port 1 CTRL
000002B6  13FC 0000 00A1000B       208      move.b #$00,CTRL_PORT_2     ; Controller port 2 CTRL
000002BE  13FC 0000 00A1000D       209      move.b #$00,CTRL_PORT_EXP   ; EXP port CTRL
000002C6                           210  
000002C6                           211  _InitCleanup:
000002C6  207C 00000000            212      move.l  #$00000000,a0       ; Move 0x0 to a0
000002CC  4CD0 FEFF                213      movem.l (a0),d0-d7/a1-a7    ; Multiple move 0 to all registers
000002D0  46FC 2700                214      move    #$2700,sr           ; Init status register (no trace, A7 is Interrupt Stack 
000002D4                           215                                  ; Pointer, no interrupts, clear condition code bits)
000002D4                           216  Main:
000002D4  4EF9 00000364            217      jmp __GameMain
000002DA                           218  
000002DA                           219  ; Interrupt Handlers ---------------------------------------------------------------------
000002DA                           220  
000002DA                           221  HBlankInterrupt:
000002DA                           222  VBlankInterrupt:
000002DA  4E73                     223     rte   ; Return from Exception
000002DC                           224   
000002DC                           225  ; Exception Handlers ---------------------------------------------------------------------
000002DC                           226  
000002DC                           227  Exception:
000002DC  4E73                     228     rte   ; Return from Exception
000002DE                           229  
000002DE                           230  ; Data ----------------------------------------------------------------------------------
000002DE                           231  
000002DE                           232  ; Z80 Sample Program
000002DE                           233  Z80Data:
000002DE= AF01 D91F                234      dc.w $af01, $d91f
000002E2= 1127 0021                235      dc.w $1127, $0021
000002E6= 2600 F977                236      dc.w $2600, $f977
000002EA= EDB0 DDE1                237      dc.w $edb0, $dde1
000002EE= FDE1 ED47                238      dc.w $fde1, $ed47
000002F2= ED4F D1E1                239      dc.w $ed4f, $d1e1
000002F6= F108 D9C1                240      dc.w $f108, $d9c1
000002FA= D1E1 F1F9                241      dc.w $d1e1, $f1f9
000002FE= F3ED 5636                242      dc.w $f3ed, $5636
00000302= E9E9 8104                243      dc.w $e9e9, $8104
00000306= 8F01                     244      dc.w $8f01
00000308                           245  
00000308                           246  ; PSG Sample Program
00000308                           247  PSGData:
00000308= 9FBF DFFF                248     dc.w $9fbf, $dfff
0000030C                           249  
0000030C                           250  VDPRegisters:
0000030C= 20                       251      dc.b $20 ; 0: Horiz. interrupt on, plus bit 2 (unknown, but docs say it needs to be on)
0000030D= 74                       252      dc.b $74 ; 1: Vert. interrupt on, display on, DMA on, V28 mode (28 cells vertically), + bit 2
0000030E= 30                       253      dc.b $30 ; 2: Pattern table for Scroll Plane A at $C000 (bits 3-5)
0000030F= 40                       254      dc.b $40 ; 3: Pattern table for Window Plane at $10000 (bits 1-5)
00000310= 05                       255      dc.b $05 ; 4: Pattern table for Scroll Plane B at $A000 (bits 0-2)
00000311= 70                       256      dc.b $70 ; 5: Sprite table at $E000 (bits 0-6)
00000312= 00                       257      dc.b $00 ; 6: Unused
00000313= 00                       258      dc.b $00 ; 7: Background colour - bits 0-3 = colour, bits 4-5 = palette
00000314= 00                       259      dc.b $00 ; 8: Unused
00000315= 00                       260      dc.b $00 ; 9: Unused
00000316= 00                       261      dc.b $00 ; 10: Frequency of Horiz. interrupt in Rasters (number of lines travelled by the beam)
00000317= 08                       262      dc.b $08 ; 11: External interrupts on, V/H scrolling on
00000318= 81                       263      dc.b $81 ; 12: Shadows and highlights off, interlace off, H40 mode (40 cells horizontally)
00000319= 34                       264      dc.b $34 ; 13: Horiz. scroll table at $D000 (bits 0-5)
0000031A= 00                       265      dc.b $00 ; 14: Unused
0000031B= 00                       266      dc.b $00 ; 15: Autoincrement off
0000031C= 01                       267      dc.b $01 ; 16: Vert. scroll 32, Horiz. scroll 64
0000031D= 00                       268      dc.b $00 ; 17: Window Plane X pos 0 left (pos in bits 0-4, left/right in bit 7)
0000031E= 00                       269      dc.b $00 ; 18: Window Plane Y pos 0 up (pos in bits 0-4, up/down in bit 7)
0000031F= 00                       270      dc.b $00 ; 19: DMA length lo byte
00000320= 00                       271      dc.b $00 ; 20: DMA length hi byte
00000321= 00                       272      dc.b $00 ; 21: DMA source address lo byte
00000322= 00                       273      dc.b $00 ; 22: DMA source address mid byte
00000323= 00                       274      dc.b $00 ; 23: DMA source address hi byte, memory-to-VRAM mode (bits 6-7)
00000324                           275  
00000324                           276  -------------------- end include --------------------
00000324                           277      include "../include/VDP.asm"
00000324                           278  ;  ______   ______   __  __
00000324                           279  ; /\  __ \ /\  ___\ /\ \_\ \
00000324                           280  ; \ \  __ \\ \___  \\ \  __ \
00000324                           281  ;  \ \_\ \_\\/\_____\\ \_\ \_\
00000324                           282  ;   \/_/\/_/ \/_____/ \/_/\/_/
00000324                           283  ;      ash@octronic.co.uk
00000324                           284  ;
00000324                           285  ; VDP.asm - Useful VDP Definitions
00000324                           286  ;
00000324                           287  ;   See http://md.squee.co/VDP
00000324                           288  ;
00000324                           289  
00000324  =00C00000                290  VDP_DATA_PORT           equ $00C00000
00000324  =00C00004                291  VDP_CTRL_PORT           equ $00C00004
00000324  =00C00008                292  VDP_HV_COUNTER          equ $00C00008
00000324  =00C00011                293  VDP_SN76489_PSG         equ $00C00011
00000324                           294  
00000324                           295  
00000324  =00000000                296  VDPREG_MODE_1                   equ $00
00000324  =00000001                297  VDPREG_MODE_2                   equ $01
00000324  =00000002                298  VDPREG_PLN_A_NAME_TBL_LOC       equ $02
00000324  =00000003                299  VDPREG_WINDOW_NAME_TBL_LOC      equ $03
00000324  =00000004                300  VDPREG_PLN_B_NAME_TBL_LOC       equ $04
00000324  =00000005                301  VDPREG_SPRITE_TBL_LOC           equ $05
00000324  =00000006                302  VDPREG_SPRITE_PTN_GEN_BASE_ADDR equ $06
00000324  =00000007                303  VDPREG_BG_COLOUR                equ $07
00000324  =00000008                304  VDPREG_UNUSED_1                 equ $08
00000324  =00000009                305  VDPREG_UNUSED_2                 equ $09
00000324  =0000000A                306  VDPREG_H_INT_CNTR               equ $0A
00000324  =0000000B                307  VDPREG_MODE_REG_3               equ $0B
00000324  =0000000C                308  VDPREG_MODE_REG_4               equ $0C
00000324  =0000000D                309  VDPREG_H_SCROLL_DATA_LOC        equ $0D
00000324  =0000000E                310  VDPREG_NAME_TBL_PTRN_GEN_BASE   equ $0E
00000324  =0000000F                311  VDPREG_AUTO_INCREMENT           equ $0F
00000324  =00000010                312  VDPREG_PLANE_SIZE               equ $10
00000324  =00000011                313  VDPREG_WINDOW_PLANE_H_POS       equ $11
00000324  =00000012                314  VDPREG_WINDOW_PLANE_V_POS       equ $12
00000324  =00000013                315  VDPREG_DMA_LENGTH_1             equ $13
00000324  =00000014                316  VDPREG_DMA_LENGTH_2             equ $14
00000324  =00000015                317  VDPREG_DMA_SRC_1                equ $15
00000324  =00000016                318  VDPREG_DMA_SRC_2                equ $16
00000324  =00000017                319  VDPREG_DMA_SRC_3                equ $17
00000324                           320  
00000324                           321  _VDPReadStatusIntoD0:
00000324  0280 00000000            322      andi.l  #00000000,d0
0000032A  3039 00C00004            323      move.w  VDP_CTRL_PORT,d0
00000330  4E75                     324      rts
00000332                           325  
00000332                           326  _VDPDisplayEnablePAL:
00000332  4E75                     327      rts
00000334                           328  
00000334                           329  _VDPDisplayDisable:
00000334  4E75                     330      rts
00000336                           331  
00000336                           332  _VDPSetDisplayMode:
00000336  4E75                     333      rts
00000338                           334  
00000338                           335  ; VDP Set Auto Increment Value
00000338                           336  ;   move.l #AI_VALUE,-(sp) 
00000338                           337  ;   jsr _VDPSetAutoIncrement
00000338                           338  _VDPSetAutoIncrement:
00000338  2F3C 0000000F            339      move.l   #VDPREG_AUTO_INCREMENT,-(sp)   ; AI Register
0000033E  2F2F 0008                340      move.l   8(sp),-(sp) ; AI Value ( 8(sp) as we jump over return address)
00000342  4EB9 0000034C            341      jsr _VDPWriteRegister
00000348  508F                     342      addq.l   #8,sp
0000034A  4E75                     343      rts
0000034C                           344  
0000034C                           345  ; VDP Write Register
0000034C                           346  ;
0000034C                           347  ; Data Format
0000034C                           348  ;   1, 0, ?, R4,R3,R2,R1,R0
0000034C                           349  ;   D7,D6,D5,D4,D3,D2,D1,D0
0000034C                           350  ; Usage
0000034C                           351  ;    move.l #register,-(sp)
0000034C                           352  ;    move.l #data,-(sp)
0000034C                           353  ;
0000034C                           354  _VDPWriteRegister:
0000034C  202F 0004                355      move.l  4(sp),d0           ; VDP Data
00000350  222F 0008                356      move.l  8(sp),d1           ; VDP Register
00000354  0001 0080                357      ori.b   #$80,d1            ; Register mask
00000358  E149                     358      lsl     #8,d1              ; Shift to byte 2
0000035A  8041                     359      or.w    d1,d0              ; Or Register with Data
0000035C  33C0 00C00004            360      move.w  d0,VDP_CTRL_PORT   ; Write to VDP
00000362  4E75                     361      rts
00000362  4E75                     362  -------------------- end include --------------------
00000364                           363  org
00000364                           364  __GameMain:
00000364                           365  
00000364                           366  _PushPallete:
00000364                           367  ; ???
00000364  23FC 40000003 00C00004   368      move.l  #$40000003,VDP_CTRL_PORT
0000036E                           369  ; Set autoincrement to 2 bytes
0000036E  2F3C 00000002            370      move.l  #2,-(sp)
00000374  4EB8 0338                371      jsr _VDPSetAutoIncrement
00000378  588F                     372      addq.l  #4,sp
0000037A                           373      ;move.w  #$8F02,VDP_CTRL_PORT     
0000037A                           374  ; Set up VDP to write to CRAM address $0000
0000037A  23FC C0000003 00C00004   375      move.l  #$C0000003,VDP_CTRL_PORT 
00000384                           376  ; Load address of Palette into a0
00000384  41F9 00000420            377      lea     Palette,a0               
0000038A                           378  ; 32 bytes of data (8 longwords, minus 1 for counter) in palette
0000038A  7007                     379      move.l  #$07,d0                  
0000038C                           380  
0000038C                           381  _PushPaletteLoop:
0000038C  23D8 00C00000            382      move.l  (a0)+,VDP_DATA_PORT       ; Move data to VDP data port, and increment source address
00000392  51C8 FFF8                383      dbra    d0,_PushPaletteLoop
00000396  33FC 8700 00C00004       384      move.w  #$8700,VDP_CTRL_PORT  ; Set background colour to palette 0, colour 8
0000039E                           385  
0000039E                           386  _PushChars:
0000039E                           387      ;jsr _VDPWriteRegister
0000039E  23FC 40200000 00C00004   388      move.l  #$40200000,VDP_CTRL_PORT  ; Set up VDP to write to VRAM address $0020
000003A8  41F9 00000440            389      lea     Characters,a0         ; Load address of Characters into a0
000003AE  7037                     390      move.l  #$37,d0               ; 32*7 bytes of data (56 longwords, minus 1 for counter) in the font
000003B0                           391  
000003B0                           392  _PushCharsLoop:
000003B0  23D8 00C00000            393      move.l (a0)+,VDP_DATA_PORT        ; Move data to VDP data port, and increment source 
000003B6                           394                                    ; address
000003B6  51C8 FFF8                395      dbra d0,_PushCharsLoop
000003BA                           396  
000003BA                           397  _DrawChars:
000003BA  23FC 40000003 00C00004   398      move.l  #$40000003,VDP_CTRL_PORT  ; Set up VDP to write to VRAM address $C000 (Plane A)
000003C4                           399                                    ; Low plane, palette 0, no flipping, plus tile ID...
000003C4                           400  
000003C4  33FC 0001 00C00000       401      move.w  #$0001,VDP_DATA_PORT      ; Pattern ID 1 - H
000003CC  33FC 0002 00C00000       402      move.w  #$0002,VDP_DATA_PORT      ; Pattern ID 2 - E
000003D4  33FC 0003 00C00000       403      move.w  #$0003,VDP_DATA_PORT      ; Pattern ID 3 - L
000003DC  33FC 0003 00C00000       404      move.w  #$0003,VDP_DATA_PORT      ; Pattern ID 3 - L
000003E4  33FC 0004 00C00000       405      move.w  #$0004,VDP_DATA_PORT      ; Pattern ID 4 - O
000003EC  33FC 0000 00C00000       406      move.w  #$0000,VDP_DATA_PORT      ; Pattern ID 0 - Blank space
000003F4  33FC 0005 00C00000       407      move.w  #$0005,VDP_DATA_PORT      ; Pattern ID 5 - W
000003FC  33FC 0004 00C00000       408      move.w  #$0004,VDP_DATA_PORT      ; Pattern ID 4 - O
00000404  33FC 0006 00C00000       409      move.w  #$0006,VDP_DATA_PORT      ; Pattern ID 6 - R
0000040C  33FC 0003 00C00000       410      move.w  #$0003,VDP_DATA_PORT      ; Pattern ID 3 - L
00000414  33FC 0007 00C00000       411      move.w  #$0007,VDP_DATA_PORT      ; Pattern ID 7 - D
0000041C                           412  
0000041C                           413  _finito:
0000041C  4EF8 041C                414      jmp     _finito
00000420                           415  
00000420                           416  Palette:
00000420= 0000                     417     dc.w $0000 ; Colour 0 - Transparent
00000422= 000E                     418     dc.w $000E ; Colour 1 - Red
00000424= 00E0                     419     dc.w $00E0 ; Colour 2 - Green
00000426= 0E00                     420     dc.w $0E00 ; Colour 3 - Blue
00000428= 0000                     421     dc.w $0000 ; Colour 4 - Black
0000042A= 0EEE                     422     dc.w $0EEE ; Colour 5 - White
0000042C= 00EE                     423     dc.w $00EE ; Colour 6 - Yellow
0000042E= 008E                     424     dc.w $008E ; Colour 7 - Orange
00000430= 0E0E                     425     dc.w $0E0E ; Colour 8 - Pink
00000432= 0808                     426     dc.w $0808 ; Colour 9 - Purple
00000434= 0444                     427     dc.w $0444 ; Colour A - Dark grey
00000436= 0888                     428     dc.w $0888 ; Colour B - Light grey
00000438= 0EE0                     429     dc.w $0EE0 ; Colour C - Turquoise
0000043A= 000A                     430     dc.w $000A ; Colour D - Maroon
0000043C= 0600                     431     dc.w $0600 ; Colour E - Navy blue
0000043E= 0060                     432     dc.w $0060 ; Colour F - Dark green
00000440                           433  
00000440                           434  Characters:
00000440= 11000110                 435     dc.l $11000110 ; Character 0 - H
00000444= 11000110                 436     dc.l $11000110
00000448= 11000110                 437     dc.l $11000110
0000044C= 11111110                 438     dc.l $11111110
00000450= 11000110                 439     dc.l $11000110
00000454= 11000110                 440     dc.l $11000110
00000458= 11000110                 441     dc.l $11000110
0000045C= 00000000                 442     dc.l $00000000
00000460                           443   
00000460= 11111110                 444     dc.l $11111110 ; Character 1 - E
00000464= 11000000                 445     dc.l $11000000
00000468= 11000000                 446     dc.l $11000000
0000046C= 11111110                 447     dc.l $11111110
00000470= 11000000                 448     dc.l $11000000
00000474= 11000000                 449     dc.l $11000000
00000478= 11111110                 450     dc.l $11111110
0000047C= 00000000                 451     dc.l $00000000
00000480                           452   
00000480= 11000000                 453     dc.l $11000000 ; Character 2 - L
00000484= 11000000                 454     dc.l $11000000
00000488= 11000000                 455     dc.l $11000000
0000048C= 11000000                 456     dc.l $11000000
00000490= 11000000                 457     dc.l $11000000
00000494= 11111110                 458     dc.l $11111110
00000498= 11111110                 459     dc.l $11111110
0000049C= 00000000                 460     dc.l $00000000
000004A0                           461   
000004A0= 01111100                 462     dc.l $01111100 ; Character 3 - O
000004A4= 11101110                 463     dc.l $11101110
000004A8= 11000110                 464     dc.l $11000110
000004AC= 11000110                 465     dc.l $11000110
000004B0= 11000110                 466     dc.l $11000110
000004B4= 11101110                 467     dc.l $11101110
000004B8= 01111100                 468     dc.l $01111100
000004BC= 00000000                 469     dc.l $00000000
000004C0                           470   
000004C0= 11000110                 471     dc.l $11000110 ; Character 4 - W
000004C4= 11000110                 472     dc.l $11000110
000004C8= 11000110                 473     dc.l $11000110
000004CC= 11000110                 474     dc.l $11000110
000004D0= 11010110                 475     dc.l $11010110
000004D4= 11101110                 476     dc.l $11101110
000004D8= 11000110                 477     dc.l $11000110
000004DC= 00000000                 478     dc.l $00000000
000004E0                           479   
000004E0= 11111100                 480     dc.l $11111100 ; Character 5 - R
000004E4= 11000110                 481     dc.l $11000110
000004E8= 11001100                 482     dc.l $11001100
000004EC= 11111100                 483     dc.l $11111100
000004F0= 11001110                 484     dc.l $11001110
000004F4= 11000110                 485     dc.l $11000110
000004F8= 11000110                 486     dc.l $11000110
000004FC= 00000000                 487     dc.l $00000000
00000500                           488   
00000500= 11111000                 489     dc.l $11111000 ; Character 6 - D
00000504= 11001110                 490     dc.l $11001110
00000508= 11000110                 491     dc.l $11000110
0000050C= 11000110                 492     dc.l $11000110
00000510= 11000110                 493     dc.l $11000110
00000514= 11001110                 494     dc.l $11001110
00000518= 11111000                 495     dc.l $11111000
0000051C= 00000000                 496     dc.l $00000000
00000520                           497  
00000520                           498  __end    ; Very last line, end of ROM address
Line 499 WARNING: END directive missing, starting address not set

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHARACTERS          440
CTRL_PORT_1         A10009
CTRL_PORT_2         A1000B
CTRL_PORT_EXP       A1000D
EXCEPTION           2DC
HBLANKINTERRUPT     2DA
HW_VERSION          A10001
INITIAL_SP          FFE000
MAIN                2D4
ORG                 364
PALETTE             420
PSGDATA             308
PSG_RAM_BASE        C00011
RAM_END             FFFFFF
RAM_START           FF0000
RESET_AUX           A10008
RESET_BUTTON        A1000C
ROM_START           0
SEGA_STR            53454741
SRAM_END            0
SRAM_START          0
TMSS_SIG            A14000
VBLANKINTERRUPT     2DA
VDPREGISTERS        30C
VDPREG_AUTO_INCREMENT  F
VDPREG_BG_COLOUR    7
VDPREG_DMA_LENGTH_1  13
VDPREG_DMA_LENGTH_2  14
VDPREG_DMA_SRC_1    15
VDPREG_DMA_SRC_2    16
VDPREG_DMA_SRC_3    17
VDPREG_H_INT_CNTR   A
VDPREG_H_SCROLL_DATA_LOC  D
VDPREG_MODE_1       0
VDPREG_MODE_2       1
VDPREG_MODE_REG_3   B
VDPREG_MODE_REG_4   C
VDPREG_NAME_TBL_PTRN_GEN_BASE  E
VDPREG_PLANE_SIZE   10
VDPREG_PLN_A_NAME_TBL_LOC  2
VDPREG_PLN_B_NAME_TBL_LOC  4
VDPREG_SPRITE_PTN_GEN_BASE_ADDR  6
VDPREG_SPRITE_TBL_LOC  5
VDPREG_UNUSED_1     8
VDPREG_UNUSED_2     9
VDPREG_WINDOW_NAME_TBL_LOC  3
VDPREG_WINDOW_PLANE_H_POS  11
VDPREG_WINDOW_PLANE_V_POS  12
VDP_CRTL_PORT       C00004
VDP_CTRL_PORT       C00004
VDP_DATA_PORT       C00000
VDP_HV_COUNTER      C00008
VDP_SN76489_PSG     C00011
Z80DATA             2DE
Z80_BUSREQ          A11100
Z80_BUS_DISABLE     0
Z80_BUS_ENABLE      100
Z80_RAM_BASE        A00000
Z80_RESET           A11200
_CONTROLLERINIT     2AE
_DRAWCHARS          3BA
_ENTRYPOINT         200
_FINITO             41C
_INITCLEANUP        2C6
_PSGINIT            27E
_PSGINITCOPY        286
_PUSHCHARS          39E
_PUSHCHARSLOOP      3B0
_PUSHPALETTELOOP    38C
_PUSHPALLETE        364
_SKIPTMSS           240
_SYSTEMINIT         214
_SYSTEMINITCLEAR    222
_VDPDISPLAYDISABLE  334
_VDPDISPLAYENABLEPAL  332
_VDPINIT            290
_VDPINITCOPY        29E
_VDPREADSTATUSINTOD0  324
_VDPSETAUTOINCREMENT  338
_VDPSETDISPLAYMODE  336
_VDPWRITEREGISTER   34C
_Z80INIT            240
_Z80INITCOPY        268
_Z80INITWAIT        250
_Z80INITWRITE       25A
__END               520
__GAMEMAIN          364
